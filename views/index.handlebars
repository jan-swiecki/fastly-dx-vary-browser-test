<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>Fastly Vary in browser test</title>
	<meta name=viewport content="width=device-width, initial-scale=1, user-scalable=no">
	<link rel="stylesheet" href="/css/ux-platform.css">
	<style>
		body {
			margin: 20px;
		}
		h1 {
			margin-bottom: 20px;
		}
		section {
			margin: 20px 0;
		}
		.fui-table {
			margin: 10px 0 0 0;
		}
		.warning {
			background: #ccc;
			padding: 10px;
		}
		tr.fail {
			background: #fff1b9;
		}
		tr.fail .expect,
		tr.fail .actual {
			font-weight: bold;
		}
		ul {
			list-style-type: disc;
			padding-left: 40px;
			margin: 1em 0;
		}
	</style>
</head>
<body class='online'>
	<div class="layout">

	<h1>Vary granularity test</h1>

	<p>This test is designed to show that browsers do not store multiple copies of objects that have a <code>Vary</code> header on the response, one for each variation, as intermediate caches do.  When you serve a response through Fastly, we store each variation of the same URL as a separate cache entry, because different end users may want different variations (eg for language variants). However, a single user rarely changes their
<!--
	<section class='test-group'>
		<h2>Accept</h2>

		<table class='fui-table'>
			<thead>
				<tr><th>Request URL</th><th>Headers</th><th>Expected cache result</th><th>Actual result</th><th>Notes</th></tr>
			</thead>
			<tr class='test'>
				<td class='url'>/format?v=Accept</td>
				<td class='headers'>Accept: application/json</td>
				<td class='expect'></td>
				<td class='actual'></td>
				<td class='note'>Seed</td>
			</tr>
			<tr class='test'>
				<td class='url'>/format?v=Accept</td>
				<td class='headers'>Accept: application/json</td>
				<td class='expect'>HIT</td>
				<td class='actual'></td>
				<td class='note'>Identical request for cachable object => HIT in HTTP cache</td>
			</tr>
			<tr class='test'>
				<td class='url'>/format?v=Accept</td>
				<td class='headers'>Accept: text/csv</td>
				<td class='expect'>MISS</td>
				<td class='actual'></td>
				<td class='note'>Different varied value => MISS<br/>HIT: Browser doesn't support vary?</td>
			</tr>
			<tr class='test'>
				<td class='url'>/format?v=Accept</td>
				<td class='headers'>Accept: application/json</td>
				<td class='expect'>MISS</td>
				<td class='actual'></td>
				<td class='note'>Back to original varied header value.  HIT for intermediate caches.  MISS for browsers because they use vary as a validator only</td>
			</tr>
		</table>
	</section>

	<section class='test-group'>
		<h2>Accept-Language</h2>
		<table class='fui-table'>
			<thead>
				<tr><th>Request URL</th><th>Headers</th><th>Expected cache result</th><th>Actual result</th><th>Notes</th></tr>
			</thead>
			<tr class='test'>
				<td class='url'>/lang?v=Accept-Language</td>
				<td class='headers'>Accept-Language: en</td>
				<td class='expect'></td>
				<td class='actual'></td>
				<td class='note'>Seed</td>
			</tr>
			<tr class='test'>
				<td class='url'>/lang?v=Accept-Language</td>
				<td class='headers'>Accept-Language: en</td>
				<td class='expect'>HIT</td>
				<td class='actual'></td>
				<td class='note'>Identical request for cachable object => HIT in HTTP cache</td>
			</tr>
			<tr class='test'>
				<td class='url'>/lang?v=Accept-Language</td>
				<td class='headers'>Accept-Language: jp</td>
				<td class='expect'>MISS</td>
				<td class='actual'></td>
				<td class='note'>Different varied value => MISS<br/>HIT: Browser doesn't support vary?</td>
			</tr>
			<tr class='test'>
				<td class='url'>/lang?v=Accept-Language</td>
				<td class='headers'>Accept-Language: en</td>
				<td class='expect'>MISS</td>
				<td class='actual'></td>
				<td class='note'>Back to original varied header value.  HIT for intermediate caches.  MISS for browsers because they use vary as a v validator only</td>
			</tr>
		</table>
	</section>

	<section class='test-group'>
		<h2>Cookie</h2>
		<table class='fui-table'>
			<thead>
				<tr><th>Request URL</th><th>Headers</th><th>Expected cache result</th><th>Actual result</th><th>Notes</th></tr>
			</thead>
			<tr class='test'>
				<td class='url'>/util/set-cookie?name=cacheVer&amp;val=1</td>
				<td class='headers'></td>
				<td class='expect'></td>
				<td class='actual'></td>
				<td class='note'>Setup: set a cookie</td>
			</tr>
			<tr class='test'>
				<td class='url'>/cookie?v=Cookie</td>
				<td class='headers'></td>
				<td class='expect'></td>
				<td class='actual'></td>
				<td class='note'>Seed a new response that varies on cookie</td>
			</tr>
			<tr class='test'>
				<td class='url'>/cookie?v=Cookie</td>
				<td class='headers'></td>
				<td class='expect'>HIT</td>
				<td class='actual'></td>
				<td class='note'>Identical request for cachable object => HIT in HTTP cache</td>
			</tr>
			<tr class='test'>
				<td class='url'>/cookie2?v=Cookie</td>
				<td class='headers'></td>
				<td class='expect'>MISS</td>
				<td class='actual'></td>
				<td class='note'>New URL, also varying by cookie => MISS</td>
			</tr>
			<tr class='test'>
				<td class='url'>/cookie2?v=Cookie</td>
				<td class='headers'></td>
				<td class='expect'>HIT</td>
				<td class='actual'></td>
				<td class='note'>Identical request for cachable object => HIT in HTTP cache</td>
			</tr>
			<tr class='test'>
				<td class='url'>/util/set-cookie?name=cacheVer&amp;val=2</td>
				<td class='headers'></td>
				<td class='expect'></td>
				<td class='actual'></td>
				<td class='note'>Setup: Change the cookie value to prepare for the next test</td>
			</tr>
			<tr class='test'>
				<td class='url'>/cookie?v=Cookie</td>
				<td class='headers'></td>
				<td class='expect'>MISS</td>
				<td class='actual'></td>
				<td class='note'>Matches existing URL but cookie has changed and cached object varies on cookie => MISS</td>
			</tr>
			<tr class='test'>
				<td class='url'>/cookie2?v=Cookie</td>
				<td class='headers'></td>
				<td class='expect'>MISS</td>
				<td class='actual'></td>
				<td class='note'>Matches existing URL but cookie has changed and cached object varies on cookie => MISS.  Changing the one cookie value should affect all requests that vary on cookie.</td>
			</tr>
		</table>
	</section>
-->
	<section class='test-group' data-requires='preload'>
		<h2>Link rel=Preload</h2>
		<table class='fui-table'>
			<thead>
				<tr><th>Request URL</th><th>Headers</th><th>Expected cache result</th><th>Actual result</th><th>Notes</th></tr>
			</thead>
			<tr class='test'>
				<td class='url'>/preload</td>
				<td class='headers'></td>
				<td class='expect'>HIT</td>
				<td class='actual'></td>
				<td class='note'>Simple preloaded asset => HIT</td>
			</tr>
			<tr class='test'>
				<td class='url'>/preload?c=0</td>
				<td class='headers'></td>
				<td class='expect'>HIT</td>
				<td class='actual'></td>
				<td class='note'>Preloaded asset not normally cachable in HTTP cache => HIT<br/>MISS: Browser does not have a preload cache?</td>
			</tr>
			<tr class='test'>
				<td class='url'>/preload?v=Accept-Encoding</td>
				<td class='headers'></td>
				<td class='expect'>HIT</td>
				<td class='actual'></td>
				<td class='note'>Preloaded asset with a vary => HIT</td>
			</tr>
			<tr class='test'>
				<td class='url'>/preload?v=Accept-Encoding&amp;c=0</td>
				<td class='headers'></td>
				<td class='expect'>HIT</td>
				<td class='actual'></td>
				<td class='note'>Preloaded asset with vary not normally cachable in HTTP cache => HIT<br/>MISS: Browser does not have a preload cache?</td>
			</tr>
			<tr class='test'>
				<td class='url'>/preload?v=Accept</td>
				<td class='headers'></td>
				<td class='expect'>MISS</td>
				<td class='actual'></td>
				<td class='note'>Varying on <code>Accept</code> causes mismatch because preload is sensitive to type (see <code>as=style</code> attribute => MISS</td>
			</tr>
			<tr class='test'>
				<td class='url'>/preload?v=Foo-Header</td>
				<td class='headers'></td>
				<td class='expect'>HIT</td>
				<td class='actual'></td>
				<td class='note'><code>Foo-Header</code> not sent in the preload request nor in the test request => HIT</td>
			</tr>
			<tr class='test'>
				<td class='url'>/preload?v=Accept%2C%20Accept-Encoding</td>
				<td class='headers'></td>
				<td class='expect'>MISS</td>
				<td class='actual'></td>
				<td class='note'>Multiple headers, includes <code>Accept</code> => MISS</td>
			</tr>
		</table>
	</section>

	<section class='test-group' data-requires='h2'>
		<h2>HTTP/2 Push</h2>
		<table class='fui-table'>
			<thead>
				<tr><th>Request URL</th><th>Headers</th><th>Expected cache result</th><th>Actual result</th><th>Notes</th></tr>
			</thead>
			<tr class='test'>
				<td class='url'>/push</td>
				<td class='headers'></td>
				<td class='expect'>HIT</td>
				<td class='actual'></td>
				<td class='note'>Simple push => HIT</td>
			</tr>
			<tr class='test'>
				<td class='url'>/push?c=0</td>
				<td class='headers'></td>
				<td class='expect'>HIT</td>
				<td class='actual'></td>
				<td class='note'>... even if it cannot be cached in the HTTP cache (because it should be in the separate preload cache)</td>
			</tr>
			<tr class='test'>
				<td class='url'>/push?v=Accept-Encoding&amp;c=0</td>
				<td class='headers'></td>
				<td class='expect'>HIT</td>
				<td class='actual'></td>
				<td class='note'>If the server pushes an object that has a Vary header on the response, it should still be a hit</td>
			</tr>
			<tr class='test'>
				<td class='url'>/push?v=Foo-Header&amp;c=0</td>
				<td class='headers'>Foo-Header: 42</td>
				<td class='expect'>MISS</td>
				<td class='actual'></td>
				<td class='note'>Should MISS since the pushed resource varies on Foo-Header, but doesn't know what Foo-Header value we'll be sending. However, some browsers incorrectly ignore Vary on pushed resources.</td>
			</tr>
		</table>
	</section>

	<section class='test-group' data-requires='sw'>
		<h2>Serviceworker-added headers</h2>
		<table class='fui-table'>
			<thead>
				<tr><th>Request URL</th><th>Headers</th><th>Expected cache result</th><th>Actual result</th><th>Notes</th></tr>
			</thead>
			<tr class='test'>
				<td class='url'>/sw-header?v=SW-Added-Header</td>
				<td class='headers'></td>
				<td class='expect'>MISS</td>
				<td class='actual'></td>
				<td class='note'>A response that varies on a header added by a serviceworker should miss on the first load, because it's not in any cache.</td>
			</tr>
			<tr class='test'>
				<td class='url'>/sw-header?v=SW-Added-Header</td>
				<td class='headers'></td>
				<td class='expect'>MISS</td>
				<td class='actual'></td>
				<td class='note'>If the value of the header added by the serviceworker changes on each request, then subsequent identical requests should also not hit the HTTP cache</td>
			</tr>
			<tr class='test'>
				<td class='url'>/sw-header</td>
				<td class='headers'></td>
				<td class='expect'>MISS</td>
				<td class='actual'></td>
				<td class='note'>If a Serviceworker adds a header to a request but the server does not vary on it, the response should be available to subsequent requests from the browser cache</td>
			</tr>
			<tr class='test'>
				<td class='url'>/sw-header</td>
				<td class='headers'></td>
				<td class='expect'>HIT</td>
				<td class='actual'></td>
				<td class='note'>Identical to previous request, random value added to a header by a serviceworker, but since the server did not vary on that value, it should hit cache.</td>
			</tr>
		</table>
	</section>

	<section class='test-group' data-requires='sw'>
		<h2>Serviceworker cache</h2>
		<table class='fui-table'>
			<thead>
				<tr><th>Request URL</th><th>Headers</th><th>Expected cache result</th><th>Actual result</th><th>Notes</th></tr>
			</thead>
			<tr class='test'>
				<td class='url'>/util/sw-clear-cache</td>
				<td class='headers'></td>
				<td class='expect'></td>
				<td class='actual'></td>
				<td class='note'>Clear the service worker cache in preparation for the test</td>
			</tr>
			<tr class='test'>
				<td class='url'>/sw-cache?v=Foo-Header&amp;c=0</td>
				<td class='headers'>Foo-Header: 1</td>
				<td class='expect'>MISS</td>
				<td class='actual'></td>
				<td class='note'>First variation of a request for something not in SW cache, expect a MISS</td>
			</tr>
			<tr class='test'>
				<td class='url'>/sw-cache?v=Foo-Header&amp;c=0</td>
				<td class='headers'>Foo-Header: 1</td>
				<td class='expect'>HIT</td>
				<td class='actual'></td>
				<td class='note'>Repeat the first variation.  Expect a HIT despite not being cachable in browser cache, because it will be cached in SW cache.</td>
			</tr>
			<tr class='test'>
				<td class='url'>/sw-cache?v=Foo-Header&amp;c=0</td>
				<td class='headers'>Foo-Header: 2</td>
				<td class='expect'>MISS</td>
				<td class='actual'></td>
				<td class='note'>Second variation: Vary on the same header but with a different value, expect a MISS</td>
			</tr>
			<tr class='test'>
				<td class='url'>/sw-cache?v=Foo-Header&amp;c=0</td>
				<td class='headers'>Foo-Header: 2</td>
				<td class='expect'>HIT</td>
				<td class='actual'></td>
				<td class='note'>Repeat second variation, expect a HIT</td>
			</tr>
			<tr class='test'>
				<td class='url'>/sw-cache?v=Foo-Header&amp;c=0</td>
				<td class='headers'>Foo-Header: 1</td>
				<td class='expect'>MISS</td>
				<td class='actual'></td>
				<td class='note'>Back to the first variation.  If serviceworker cache matches the behaviour of the HTTP cache, this should now be a miss.</td>
			</tr>
			<tr class='test'>
				<td class='url'>/sw-cache?v=Foo-Header&amp;c=0</td>
				<td class='headers'>Foo-Header: 2</td>
				<td class='expect'>MISS</td>
				<td class='actual'></td>
				<td class='note'>Repeat the second variation again, expect a MISS</td>
			</tr>
		</table>
	</section>

	<section class='test-group'>
		<h2>304 Not Modified (with matching validator)</h2>
		<table class='fui-table'>
			<thead>
				<tr><th>Request URL</th><th>Headers</th><th>Expected cache result</th><th>Actual result</th><th>Notes</th></tr>
			</thead>
			<tr class='test'>
				<td class='url'>/304-special?matching</td>
				<td class='headers'>Foo-Header: 1</td>
				<td class='expect'></td>
				<td class='actual'></td>
				<td class='note'>Seed with a cachable response that varies on Accept (not Foo-Header) but requires revalidation</td>
			</tr>
			<tr class='test'>
				<td class='url'>/304-special?matching</td>
				<td class='headers'>Foo-Header: 1</td>
				<td class='expect'>304</td>
				<td class='actual'></td>
				<td class='note'>Expect initial conditional HIT and revalidation request. Server returns a 304 but with <code>Vary: Accept, Foo-Header</code> (different Vary!).  Use cache, update with new Vary header => HIT</td>
			</tr>
			<tr class='test'>
				<td class='url'>/304-special?matching</td>
				<td class='headers'>Foo-Header: 1</td>
				<td class='expect'>304</td>
				<td class='actual'></td>
				<td class='note'>Further requests continue to hit cache.</td>
			</tr>
		</table>
	</section>

	<section class='test-group'>
		<h2>304 Not Modified (with non-matching validator)</h2>
		<table class='fui-table'>
			<thead>
				<tr><th>Request URL</th><th>Headers</th><th>Expected cache result</th><th>Actual result</th><th>Notes</th></tr>
			</thead>
			<tr class='test'>
				<td class='url'>/304-special?non-matching</td>
				<td class='headers'>Foo-Header: 1</td>
				<td class='expect'></td>
				<td class='actual'></td>
				<td class='note'>Seed with a response that <code>Vary: Accept</code> (not Foo-Header), cacheable but requires revalidation</td>
			</tr>
			<tr class='test'>
				<td class='url'>/304-special?non-matching</td>
				<td class='headers'>Foo-Header: 2</td>
				<td class='expect'>304</td>
				<td class='actual'></td>
				<td class='note'>Expect initial conditional HIT and revalidation request. Server returns a 304 but with <code>Vary: Accept, Foo-Header</code> (different Vary!).  Use cache, update with new Vary header => HIT</td>
			</tr>
			<tr class='test'>
				<td class='url'>/304-special?non-matching</td>
				<td class='headers'>Foo-Header: 1</td>
				<td class='expect'>MISS</td>
				<td class='actual'></td>
				<td class='note'>Spec unclear, but browsers seem to update both the reference request and the cache object, meaning that the cached version  is now the variation for fooheader=2.  Requesting fooheader=1 should therefore MISS.</td>
			</tr>
		</table>
	</section>

	<h2>Conclusions</h2>

	<ul>
		<li>FF Serviceworker cache behaviour differs to Chrome, which is right?</li>
		<li>Chrome does not cache preloaded assets if they have no-store.  Bug?</li>
	</ul>

	</div>
	<script>

		const testid = "{{id}}";
		const supports = {
			sw: false,
			preload: false,
			h2: (document.cookie.indexOf('h2=1') !== -1)
		};
		const DELAY_MISS = 1000;
		const DELAY_304 = 500;

		if ('serviceWorker' in navigator) {
			if (!navigator.serviceWorker.controller) {
				window.addEventListener('load', () => {
					navigator.serviceWorker.register('/sw.js').catch(err => {
						console.log('ServiceWorker registration failed: ', err);
					});
				});
			} else if (navigator.serviceWorker.controller) {
				supports.sw = true;
			}
		}

		const lpel = document.createElement("link");
		if (('relList' in lpel) && ('supports' in lpel.relList) && lpel.relList.supports('preload')) {
			supports.preload = true;
		}

		Array.from(document.querySelectorAll('.test-group[data-requires]')).forEach(el => {
			if (!supports[el.dataset.requires]) {
				const title = el.querySelector('h2').innerHTML;
				el.innerHTML = '<p class="warning">'+title+' test group disabled because this browser does not support '+el.dataset.requires+' or it is not enabled.</p>';
			}
		});

		const testRun = Array.from(document.querySelectorAll('.test')).reduce((out, testRow) => {
			return out.then(() => {
				const pathfrag = testRow.querySelector('.url').innerText;
				const url = new URL(
					location.protocol + '//' +
					location.host +
					(pathfrag.startsWith('/util/') ? pathfrag : '/test/'+testid+pathfrag)
				);
				const headers = testRow
					.querySelector('.headers')
					.innerText
					.split(/\s*;\s*/)
					.reduce((heads, item) => {
						const [k,v] = item.split(/:\s*/, 2);
						if (k) heads[k] = v;
						return heads;
					}, {})
				;
				const startTime = performance.now();
				return fetch(url, {headers: headers, credentials: "same-origin"})
					.then(resp => resp.text())
					.then(data => {
						const endTime = performance.now();
						const expect = testRow.querySelector('.expect').innerText;

						if (expect) {
							const elapsed = endTime - startTime;
							const actual = (elapsed > DELAY_MISS) ? 'MISS' : (elapsed > DELAY_304) ? '304' : 'HIT';
							testRow.querySelector('.actual').innerHTML = actual;
							if (actual !== testRow.querySelector('.expect').innerText) {
								testRow.classList.add('fail');
							}
						}
					})
				;
			});
		}, Promise.resolve())
		.catch(e => console.log(e));
	</script>
	</body>
</html>
